library(SkiRentalProject)
library(SkiRentalProject)
library(SkiRentalProject)
inputdata <- data.frame(3, 24, 4, 1, 1)
View(inputdata)
names(inputdata) <- ("Month", "Day", "Weekday", "Snow", "Holiday")
names(inputdata) <- c("Month", "Day", "Weekday", "Snow", "Holiday")
View(inputdata)
connStr <- paste("Driver=SQL Server; Server=", ".",
";Database=", "Tutorialdb", ";Trusted_Connection=true;", sep = "");
models <- RxSqlServerData(sqlQuery = "select native_model from dbo.rental_models where model_name = 'dtree_model'", connectionString = connStr)
models$native_model
View(models)
models <- RxSqlServerData(sqlQuery = "select native_model from dbo.rental_models where model_name = 'dtree_model'", connectionString = connStr, returnDataFrame = TRUE)
View(models)
models$native_model
str(models)
summary(models)
models[1]
models(1)
models.[1]
models[1]
models[0]
models <- rxImport(models)
models
View(models)
SkiRentalProject::GeneratePredictions(inputdata, models$native_model)
unserialize(models$native_model)
unserialize(models[1]$native_model)
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
inputdata
names(inputdata) <- c("Month", "Day", "WeekDay", "Snow", "Holiday")
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
connection
library(SkiRentalProject)
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
SkiRentalProject::GeneratePredictions(inputdata, as.raw(models[1]$native_model))
models[1]$native_model
View(models)
SkiRentalProject::GeneratePredictions(inputdata, as.raw(models[1]$native_model))
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
models[1]
str(models[1]$native_model)
GeneratePredictions <- function(InputDataSet, rx_model) {
require("RevoScaleR");
rentals = InputDataSet;
#Convert types to factors
rentals$Holiday = factor(rentals$Holiday);
rentals$Snow = factor(rentals$Snow);
rentals$WeekDay = factor(rentals$WeekDay);
#Before using the model to predict, we need to unserialize it
rental_model = unserialize(wkb::hex2raw(as.character(rx_model)));
OutputDataSet <- rxPredict(rental_model, rentals);
OutputDataSet
}
GeneratePredictions(inputdata, models[1]$native_model)
GeneratePredictions <- function(InputDataSet, rx_model) {
require("RevoScaleR");
rentals = InputDataSet;
#Convert types to factors
rentals$Holiday = factor(rentals$Holiday);
rentals$Snow = factor(rentals$Snow);
rentals$WeekDay = factor(rentals$WeekDay);
#Before using the model to predict, we need to unserialize it
#rental_model = unserialize(wkb::hex2raw(as.character(rx_model)));
rental_model = unserialize(rx_model);
OutputDataSet <- rxPredict(rental_model, rentals);
OutputDataSet
}
SkiRentalProject::GeneratePredictions(inputdata, models[1]$native_model)
detach("package:SkiRentalProject", detach = TRUE)
detach("package:SkiRentalProject", unload = TRUE)
GeneratePredictions(inputdata, models[1]$native_model)
require("RevoScaleR");
rentals = inputdata;
rentals$Holiday = factor(rentals$Holiday)
rentals$Snow = factor(rentals$Snow)
rentals$WeekDay = factor(rentals$WeekDay)
rental_model = unserialize(rx_model)
model <- models[1]$native_model
rental_model = unserialize(model)
rental_model = unserialize(wkb::hex2raw(as.character(model)))
rental_model = unserialize(wkb::hex2raw(model))
wkb::hex2raw(as.character(model))
unserialize(wkb::hex2raw(as.character(model)))
unserialize(unlist(model))
View(model)
library(SkiRentalProject)
factor(4)
factor(1)
